# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet test "Sample spec test"
it('should render', () => {
  
});
endsnippet

snippet fc "function component"
export const ${1:foo}: React.FC<${3}> = ({ ${2} }) => {
  return <div>${4}</div>;
};
endsnippet

snippet usecb "useCallback"
const ${1} = useCallback(() => {
  
}, []);
endsnippet

snippet usest "useState"
const [${1}, ${2}] = useState();
endsnippet

snippet useref "useRef"
const ${1} = useRef<HTMLDivElement | null>(null);
endsnippet

snippet useef "useEffect"
useEffect(() => {
  ${1}
}, [${2}]);
endsnippet

snippet usememo "useMemo"
useMemo(() => {
  ${1}
}, [${2}]);
endsnippet

snippet tapLog "consoleTap"
const taplog = (f: Function, s: string) => (...args: unknown[]) => {
  console.log(">>> " + s + ">>>", ...args);
  return f(...args);
};
endsnippet

snippet log "log"
const log = <T>(message: string, x: T): T => {
  console.log(message, x);
  return x;
};
endsnippet

snippet range "range sequance generator"
const range: {
  (stop: number): number[];
  (start: number, stop: number, step: number): number[];
} = (start: number, stop?: number, step = 1) =>
  Array.from(
    { length: stop === undefined ? start : (stop - start) / step + 1 },
    (_, i) => (stop === undefined ? 0 : start) + i * step
  );
endsnippet

snippet swap "swaps two elements in array"
const swap = <T extends unknown>(a: number, b: number, arr: T[]): T[] => {
  const temp = arr[a];
  arr[a] = arr[b];
  arr[b] = temp;
  return arr;
};
endsnippet

snippet times "call the fn X times"
const times = <T extends unknown>(f: () => T, t: number) => {
  let result: T;
  while (t--) {
    result = f();
  }
  return result;
};
endsnippet
